/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package maze.gui;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.EventQueue;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class Maze {

    public static final int WIDTH = 800;
    public static final int HEIGHT = WIDTH; // Sama kuin leveys, jotta voidaan pitää näkymä symmetrisenä. Helpottaa
                                            // labyrintin käsittelyä
    public static final int CELL_SIZE = WIDTH / 32;
    public static final int START_CELL = 0;

    private int columns, rows;

    public static void main(String[] args) {
        new Maze();
    }

    public Maze() {
        // Jaetaan solujen leveys solun koolla, jotta voidaan luoda oikea määrä soluja
        // käsiteltävään listaan ja pidetään rivien ja kolumnien määrä samana, jotta
        // symmetrisyys säilyy
        columns = Math.floorDiv(WIDTH, CELL_SIZE);
        rows = columns;

        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                        | UnsupportedLookAndFeelException ex) {
                    ex.printStackTrace();
                }
                showGui();
            }
        });
    }

    private JFrame createGUI() {
        JFrame mainFrame = new JFrame("Java Maze Generator");

        JPanel mainContainer = new JPanel();
        mainContainer.setLayout(new BoxLayout(mainContainer, BoxLayout.Y_AXIS));
        mainFrame.setContentPane(mainContainer);
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel mazeBorder = createMazeBorder(rows, columns);
        MazeGridPanel mazeGridPanel = createMazeGridPanel(rows, columns);

        mazeBorder.add(mazeGridPanel);

        mainContainer.add(mazeBorder);
        mainContainer.add(createCards(mazeGridPanel));

        mainFrame.pack();
        mainFrame.setLocationRelativeTo(null);
        return mainFrame;
    }

    private void showGui() {
        createGUI().setVisible(true);
    }

    private JPanel createMazeBorder(int rows, int columns) {
        JPanel mazeBorder = new JPanel();
        mazeBorder.setBounds(0, 0, WIDTH + CELL_SIZE, HEIGHT + CELL_SIZE);
        mazeBorder.setBorder(BorderFactory.createEmptyBorder(CELL_SIZE, CELL_SIZE, CELL_SIZE, CELL_SIZE));
        return mazeBorder;
    }

    private MazeGridPanel createMazeGridPanel(int rows, int columns) {
        MazeGridPanel mazeGrid = new MazeGridPanel(rows, columns);
        mazeGrid.setBackground(Color.GRAY);

        return mazeGrid;
    }

    private JPanel createCards(MazeGridPanel mazeGridPanel) {
        JButton runButton = new JButton("Suorita");
        CardLayout cardLayout = new CardLayout(30, 30);
        JPanel cards = new JPanel(cardLayout);

        cards.setOpaque(false);
        cards.add(runButton, "Suorita");

        runButton.addActionListener(event -> {
            mazeGridPanel.generate();
        });

        return cards;
    }
}
